spring:
  data:
    redis:
      host: localhost
      port: 6379
  r2dbc:
    url: r2dbc:postgresql://${PG_HOST:localhost}:${PG_PORT:5432}/order
    username: ${PG_USERNAME:root}
    password: ${PG_PASSWORD:root}
  flyway:
    url: jdbc:postgresql://${PG_HOST:localhost}:${PG_PORT:5432}/order
    user: ${PG_USERNAME:root}
    password: ${PG_PASSWORD:root}
    locations: classpath:db/migration
  kafka:
    producer:
      bootstrap-servers: ${KAFKA_HOST:localhost}:${KAFKA_PORT:9092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: orderConfirmation:com.diploma.order_service.models.order.OrderConfirmation
  application:
    name: order-service

management:
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include:
        - prometheus
# resilience4j:
#   bulkhead:
#     instances:
#       # customerServiceBulkhead:
#       #   max-concurrent-calls: 40         # Запросы к клиентам — быстрые, но часто повторяются
#       #   max-wait-duration: 50ms          # Быстро отказывать, если всё занято

#       # productServiceBulkhead:
#       #   max-concurrent-calls: 20         # Тяжёлый вызов, может тормозить цепочку
#       #   max-wait-duration: 50ms

#       # paymentServiceBulkhead:
#       #   max-concurrent-calls: 25         # Зависит от скорости платёжного сервиса
#       #   max-wait-duration: 100ms

#       orderServiceThrottling:
#         max-concurrent-calls: 100
#         max-wait-duration: 2000ms
resilience4j:
  bulkhead:
    instances:
      orderServiceThrottling:
        max-concurrent-calls: 150           # сколько одновременно запросов обрабатываем
        max-wait-duration: 2000ms           # ждём максимум 2 секунды — потом 429

  ratelimiter:
    instances:
      orderServiceLimiter:
        limit-for-period: 150               # разрешаем 150 запросов в секунду ( пик)
        limit-refresh-period: 1s
        timeout-duration: 0ms      
    # orderServiceRateLimiter:
    #   limit-for-period: 150
    #   limit-refresh-period: 1s
    #   timeout-duration: 0ms
    

# URLs for open feign via api gateway
application:
    config:
        customer-url: http://${CUSTOMER_SERVICE_HOST:localhost}:${CUST_SERVICE_PORT:8090}/api/v1/customer
        product-url: http://${PRODUCT_SERVICE_HOST:localhost}:${PRODUCT_SERVICE_PORT:8345}/api/v1/product
        payment-url: http://${PAYMENT_SERVICE_HOST:localhost}:${PAYMENT_SERVICE_PORT:9324}/api/v1/payment
server:
  port: ${ORDER_SERVICE_PORT:8633} 